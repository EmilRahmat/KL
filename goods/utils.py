import openpyxl
from goods.models import Variation, ProcessedReceipt, Products, Categories
from django.db import transaction
import logging

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
def update_stock_from_excel(file_path):
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active

    for row in sheet.iter_rows(min_row=2, values_only=True):
        sku = row[0]
        quantity = row[6]

        try:
            variation = Variation.objects.get(sku=sku)
            variation.quantity = quantity
            variation.save()
            print(f'‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è {sku} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {quantity}')
        except Variation.DoesNotExist:
            print(f'‚ö†Ô∏è –í–∞—Ä–∏–∞—Ü–∏—è —Å SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —á–µ–∫–∞–º (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
def update_stock_by_receipts(file_path):
    

    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active

    receipt_id = None
    items_to_process = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        col_2 = str(row[2]).strip() if row[2] else ""
        sku = str(row[10]).strip() if row[10] else ""
        qty = row[12]

        if col_2.startswith("–ß–µ–∫"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ–∫–∞
            if receipt_id and items_to_process:
                if ProcessedReceipt.objects.filter(receipt_id=receipt_id).exists():
                    print(f'üîÅ –ß–µ–∫ {receipt_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.')
                else:
                    try:
                        with transaction.atomic():
                            for sku_val, qty_val in items_to_process:
                                try:
                                    variation = Variation.objects.get(sku=sku_val)
                                    variation.quantity = max(0, variation.quantity - int(qty_val))
                                    variation.save()
                                    print(f'üõí {qty_val} —Å–ø–∏—Å–∞–Ω–æ –∏–∑ {sku_val}, –æ—Å—Ç–∞–ª–æ—Å—å {variation.quantity}')
                                except Variation.DoesNotExist:
                                    print(f'‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å SKU {sku_val} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                            ProcessedReceipt.objects.create(receipt_id=receipt_id)
                    except Exception as e:
                        print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞ {receipt_id}: {e}')

            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–µ–∫
            receipt_id = col_2
            items_to_process = []

        elif receipt_id and sku and qty:
            items_to_process.append((sku, qty))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if receipt_id and items_to_process:
        if not ProcessedReceipt.objects.filter(receipt_id=receipt_id).exists():
            try:
                with transaction.atomic():
                    for sku_val, qty_val in items_to_process:
                        try:
                            variation = Variation.objects.get(sku=sku_val)
                            variation.quantity = max(0, variation.quantity - int(qty_val))
                            variation.save()
                            print(f'üõí {qty_val} —Å–ø–∏—Å–∞–Ω–æ –∏–∑ {sku_val}, –æ—Å—Ç–∞–ª–æ—Å—å {variation.quantity}')
                        except Variation.DoesNotExist:
                            print(f'‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å SKU {sku_val} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                    ProcessedReceipt.objects.create(receipt_id=receipt_id)
            except Exception as e:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ {receipt_id}: {e}')
        else:
            print(f'üîÅ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫ {receipt_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.')

logger = logging.getLogger(__name__)

SEASON_MAPPING = {
    'all season': 'all_season',
    '–æ—Å–µ–Ω—å-–∑–∏–º–∞': 'autumn_winter',
    '–≤–µ—Å–Ω–∞-–ª–µ—Ç–æ': 'spring_summer',
}

COLOR_MAPPING = {
    '–±–µ–ª—ã–π': 'white',
    '—á–µ—Ä–Ω—ã–π': 'black',
    '–∫—Ä–∞—Å–Ω—ã–π': 'red',
    '–±–µ–∂–µ–≤—ã–π': 'beige',
    '—Ö–∞–∫–∏': 'khaki',
    '—Ä–æ–∑–æ–≤—ã–π': 'ping',
    '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'viol',
    '—Å–∏–Ω–∏–π': 'blue',
    '–∑–µ–ª–µ–Ω—ã–π': 'green',
    '–∂–µ–ª—Ç—ã–π': 'yellow',
    '—Å–µ—Ä—ã–π': 'grey',
    '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'brown',
    '–±–æ—Ä–¥–æ–≤—ã–π': 'burgundy',
}

def import_products_from_excel(filepath):
    wb = openpyxl.load_workbook(filepath)
    sheet = wb.active

    logs = []

    SEASON_MAPPING = {
        'all season': 'all_season',
        'spring summer': 'spring_summer',
        'autumn winter': 'autumn_winter',
        '–≤–µ—Å–Ω–∞-–ª–µ—Ç–æ': 'spring_summer',
        '–æ—Å–µ–Ω—å-–∑–∏–º–∞': 'autumn_winter',
        '–Ω–∞ –ª—é–±–æ–π —Å–µ–∑–æ–Ω': 'all_season',
    }

    COLOR_MAPPING = {
        '–±–µ–ª—ã–π': 'white',
        '—á–µ—Ä–Ω—ã–π': 'black',
        '—Å–∏–Ω–∏–π': 'blue',
        '–∫—Ä–∞—Å–Ω—ã–π': 'red',
        '–±–µ–∂–µ–≤—ã–π': 'beige',
        '—Ö–∞–∫–∏': 'khaki',
        '—Ä–æ–∑–æ–≤—ã–π': 'pink',
        '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'violet',
        '–∑–µ–ª–µ–Ω—ã–π': 'green',
        '–∂–µ–ª—Ç—ã–π': 'yellow',
        '—Å–µ—Ä—ã–π': 'grey',
        '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'brown',
        '–±–æ—Ä–¥–æ–≤—ã–π': 'burgundy',
    }

    for row in sheet.iter_rows(min_row=2, values_only=True):
        if len(row) < 10:
            continue

        product_sku, name, price, category_id, var_sku, size, color, prod_size, qty, season, *_ = row

        if not product_sku or not var_sku:
            continue

        product_sku = str(product_sku).strip().replace(' ', '')
        var_sku = str(var_sku).strip().replace(' ', '')
        price = float(str(price).replace(' ', '').replace(',', '.'))
        qty = int(qty) if qty else 0

        season = str(season).strip().lower().replace('-', ' ')
        season = SEASON_MAPPING.get(season, 'all_season')

        color = str(color).strip().lower()
        color = COLOR_MAPPING.get(color, None)

        category = Categories.objects.filter(id=category_id).first()
        if not category:
            logs.append(f'‚õî –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID={category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—â–µ–Ω SKU={product_sku}')
            continue

        product, created = Products.objects.get_or_create(
            sku=product_sku,
            defaults={
                'name': name,
                'price': price,
                'category': category,
                'season': season,
            }
        )

        if not created:
            updates = []
            if product.name != name:
                updates.append(f"–Ω–∞–∑–≤–∞–Ω–∏–µ '{product.name}' ‚Üí '{name}'")
                product.name = name
            if product.price != price:
                updates.append(f"—Ü–µ–Ω–∞ {product.price} ‚Üí {price}")
                product.price = price
            if product.category_id != category.id:
                updates.append(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è ID {product.category_id} ‚Üí {category.id}")
                product.category = category
            if product.season != season:
                updates.append(f"—Å–µ–∑–æ–Ω {product.season} ‚Üí {season}")
                product.season = season
            if updates:
                product.save()
                logs.append(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–≤–∞—Ä [{product.sku}]: " + "; ".join(updates))

        variation, v_created = Variation.objects.update_or_create(
            sku=var_sku,
            defaults={
                'product': product,
                'size': size,
                'color': color,
                'producer_size': prod_size,
                'quantity': qty,
                'is_active': True
            }
        )

        if v_created:
            logs.append(f"‚ûï –°–æ–∑–¥–∞–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è {var_sku}")
        else:
            logs.append(f"üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è {var_sku}")

    return logs
