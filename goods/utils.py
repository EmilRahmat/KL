import openpyxl
from goods.models import Variation, ProcessedReceipt
from django.db import transaction

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
def update_stock_from_excel(file_path):
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active

    for row in sheet.iter_rows(min_row=2, values_only=True):
        sku = row[0]
        quantity = row[6]

        try:
            variation = Variation.objects.get(sku=sku)
            variation.quantity = quantity
            variation.save()
            print(f'‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è {sku} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {quantity}')
        except Variation.DoesNotExist:
            print(f'‚ö†Ô∏è –í–∞—Ä–∏–∞—Ü–∏—è —Å SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —á–µ–∫–∞–º (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
def update_stock_by_receipts(file_path):
    

    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active

    receipt_id = None
    items_to_process = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        col_2 = str(row[2]).strip() if row[2] else ""
        sku = str(row[10]).strip() if row[10] else ""
        qty = row[12]

        if col_2.startswith("–ß–µ–∫"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ–∫–∞
            if receipt_id and items_to_process:
                if ProcessedReceipt.objects.filter(receipt_id=receipt_id).exists():
                    print(f'üîÅ –ß–µ–∫ {receipt_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.')
                else:
                    try:
                        with transaction.atomic():
                            for sku_val, qty_val in items_to_process:
                                try:
                                    variation = Variation.objects.get(sku=sku_val)
                                    variation.quantity = max(0, variation.quantity - int(qty_val))
                                    variation.save()
                                    print(f'üõí {qty_val} —Å–ø–∏—Å–∞–Ω–æ –∏–∑ {sku_val}, –æ—Å—Ç–∞–ª–æ—Å—å {variation.quantity}')
                                except Variation.DoesNotExist:
                                    print(f'‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å SKU {sku_val} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                            ProcessedReceipt.objects.create(receipt_id=receipt_id)
                    except Exception as e:
                        print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞ {receipt_id}: {e}')

            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–µ–∫
            receipt_id = col_2
            items_to_process = []

        elif receipt_id and sku and qty:
            items_to_process.append((sku, qty))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if receipt_id and items_to_process:
        if not ProcessedReceipt.objects.filter(receipt_id=receipt_id).exists():
            try:
                with transaction.atomic():
                    for sku_val, qty_val in items_to_process:
                        try:
                            variation = Variation.objects.get(sku=sku_val)
                            variation.quantity = max(0, variation.quantity - int(qty_val))
                            variation.save()
                            print(f'üõí {qty_val} —Å–ø–∏—Å–∞–Ω–æ –∏–∑ {sku_val}, –æ—Å—Ç–∞–ª–æ—Å—å {variation.quantity}')
                        except Variation.DoesNotExist:
                            print(f'‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å SKU {sku_val} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                    ProcessedReceipt.objects.create(receipt_id=receipt_id)
            except Exception as e:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ {receipt_id}: {e}')
        else:
            print(f'üîÅ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫ {receipt_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.')

